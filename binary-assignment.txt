Binary Exercises

1. Without using a calculator:

{64 in base 10 -> base 2 (example)
	  1000000 base 2}

100 in base 10 -> base 2
      (64 32 16 8 4 2 1)
	1  1  0 0 1 0 0 = base 2	

100 in base 10 -> base 5
(600 125 25 5 1)
	  4 0 0  = base 5

1111111 in base 2 -> base 10
64+32+16+8+4+2+1 = 127

2. Describe the algorithm for adding two binary numbers

Example:		
    1001    9
   +0011   +3
   -----   --
   01100   12

Add the 1st bit of each column, record 0 if both 0, record 1 if only one one, record 0 and carry one if both 1. Add the second column of bits including the carry over. If all zero record zero, if only 1 one record 1, if two are 1 record zero and carry a one to the third column. If the carry is one and the others are one as well, then record one and carry over a one to the next column, continue repeating this pattern until you complete all column with a one it in.

For the above example would look like this-
Add 1+1      record 0 in bit 1. carry the one to the 2nd column.
Add 0+1+1=10 record 0 in bit 2. carry the 1 to the 3rd column.
Add 1+0+0=0  record 1 in bit 3. No carry.
Add 1+0=1    record 1 in the 4th bit. 
console.log(result)=1100    


3. Describe the algorithm for multiplying two binary numbers

Example:			 1001
    1001    9		       +10010
   x0011   x3			-----
   -----   --			11011
   11011   27

Stack numbers vertically. Multiply column one on the right, record 1 if both 1, record 0 if any zero. Next multiply column two of top row by column one of bottom row. Record 1 if both 1, record 0 if any zeros. Repeat until the ones are done in top row. If bottom row has more than one column's of 1 record 0 in new row underneath the current result. Next multiply top row by the second column of bottom row. Record in new row starting left of zero in the same pattern as before. If no more 1's in bottom row then add the resulting rows using the adding algorithm from above. 

For the above example would look like this-
Multiply 1*1 record 1 in bit 1
Multiply 1*0 record 0 in bit 2
Multiply 1*0 record 0 in bit 3
Multiply 1*1 record 1 in bit 4
Make new row below result put 0 in bit one
Multiply 1*1 record 1
Multiply 1*0 record 0
Multiply 1*0 record 0
Multiply 1*1 record 1
End multiplying
Add top result to bottom result follow adding algorithm
1001 + 10010 = 11011


4. Is there a trick for multiplying numbers by 2? Dividing numbers by 2?
 1111			1111
 * 10			/ 10
-----			-----
11110			 111 remainder 1					
Yes there is a trick to division and multiplication. For multiplication by 2 in binary, add a zero on the right side. For division remove the first bit on the right. 

5. Write the truth tables for AND, OR, and NOT

(example) AND:
    && | a b
    -------
    1 | 1 1
    0 | 1 0
    0 | 0 1
    0 | 0 0

    || | a b
    -------
    1 | 1 1
    1 | 1 0
    1 | 0 1
    0 | 0 0

    ! | a 
    ------
    0 | 1 
    1 | 0 
   




 
EXTRA CREDIT 1: Using just the operators described above, build a "half adder".
A "half adder" takes in two inputs, A and B, and produces as output
the "sum" of A and B, and a "carry" if one exists.


Here is the truth table for the "half adder". + is the sum, and "C"
is the carry.
    + C | A B
    ---------
    0 0 | 0 0
    1 0 | 0 1
    1 0 | 1 0
    1 1 | 1 1

0 + 0 = 0 Carry = 0
0 + 1 = 1 Carry = 0
1 + 1 = 1? Should = 10 Carry = 1 
Not sure what the answer should look Like?


    

EXTRA CREDIT 2: Using just the operators described above, build a "full adder".
A "full adder" takes in three inputs: A, B, and Cin (the carry in), and produces two
outputs: the sum (S) and a carry out (Cout)

Here is the truth table for the "full adder".

A  B  Cin  | Cout S
------------------
0  0  0    |  0  0
0  0  1    |  0  1
0  1  0    |  0  1
0  1  1    |  1  0
1  0  0    |  0  1
1  0  1    |  1  0
1  1  0    |  1  0
1  1  1    |  1  1

0 + 0 + Cin(0) = 0, Cout = 0
0 + 0 + Cin(1) = 1, Cout = 0
0 + 1 + Cin(0) = 1, Cout = 0
0 + 1 + Cin(1) = 0, Cout = 1
1 + 1 + Cin(1) = 1, Cout = 1
Not sure what the answer should look like?

